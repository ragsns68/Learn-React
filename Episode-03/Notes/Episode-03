writing the scripts in package.json file
npm start is equivalent to npm run start , npm start is npx parcel index.html which we can configure in package.json file

why we should use React JS?
Because of its diffing algorithm, the performance gets optimized. The most costly operation for any web application is the DOM tree manipulation and that is optimized by react developers.

To Use React we can either use CDN links or the local package installations(preferred).

Writing script for the execution of dev and prod builds :
 "scripts": {
    "test": "jest",
    "start":"parcel index.html",         //development build
    "build":"build parcel index.html"   //production build
  },
now we can execute npx parcel index.html with npm start or npm run start
and npx parcel build index.html with npm run build

parcel is installed to make the application production ready.


React.createElement() => object =>HTMLElement(render)
React Elements are the equivalent of DOM Elements. But not an HTML Element its an object.When we render react element than it becomes html element.Replace everything with the render object in the root div.

react can be applied to any application which is even made of some other language that is why its known as library not the framework.

JSX is not html inside js. JSX is html or xml like syntax. JSX is not react too. JSX is the way to create an ReactElement (Object) used to make the React developers life easy, coding easy and intuitive. 
React.createElement() is the core way to create react element same can be easily done using JSX. 

Javascript is the code which is understood by js engine. JS engine understands EcmaScript 6 , 
Can JS engine understand JSX  like const jsxHeading = <h1>Hello World From JSX</h1>? No
No, than how this code is working ?
Because of parcel the JSX is being transpiled(converted to the code that browser/React can understand) before it reaches the browser.
Transpiling is done by parcel's dependency called as Babel.

Babel is not created by facebook

       using babel
//JSX ============> React.createElement() => React element(Object) =>HTML Element (tags using render)

Babel (some piece of js code) is a champ in converting one code to another. Few browsers don't understand the ES6 (new version of JS) babel also transpiles it to old browser understandable format. 
How it works ? Reads character one by one and changes accordingly.
(good documentation)

JSX    v/s                JS
1. className                class
2. camel case               tabindex
for attributes
tabIndex
3. for multiple lines
it should be in 
the brackets () 


Ex: const subheading = <h1 id="test" className="avc" tabIndex="2">Hi I am jSX</h1>     // single line

const subheading = (<h1 id="test" className="avc" tabIndex="2">
Hi I am jSX
</h1>)     // multiple line

Assignment : Explore various attributes in jsx tag ?


Useful Extensions :
1. Prettier - Code Formatter
2. Bracket Pair Colorization Toggler
3. Better Comments


//heading : React Element , An Object

//Components: Everything in React is a component
//Functional & Class Based Component, Always write the name of React Component with capital letter o/w it will throw an error.
//Functional Component => A normal js function which returns some jsx or which returns React element.
//function - NEW
//class - OLD

Way of writing Functional Components : writing return not writing return 

const Fn=()=>{
  return true
}

const Fn = () => true  //industrial std.

const Fn = () =>{
  true
}

const Fn = () =>{
  return (<>
  true
  </>)
}

const Fn = () =>(
  <>
  true
  </>)

  React Element v/s Component
  Render a React Element => root.render(header)
  Render a React Component => root.render(<Header/>)

What is component composition ? => Component inside component.

Can we use normal js function instead of arrow functions ? 
Yes but as per the indeustrial standards, new way we should stick to arrow functions.

const Title = ()=>{
  <h1 className="test" tabIndex="5">
  Title keyword
  </h1>
}

const Title = function(){
  return  (<h1 className="test" tabIndex="5">
  Title keyword
  </h1>)
}   //here return keyword is manadatory even for single line.

we can insert any js code inside jsx code using curly brackets {}
ex: 
<h2>{100+200}</h2>
<>{console.log("aaaccc")}</>

when we have components that time the sequence doesn't matter , the code is not giving any error.
but while having react element the sequence is important.

DATA SANITIZATION : PREVENTING FROM MALICIOUS ATTACKS
Cross Site Scripting : Cross-site scripting (XSS) is an attack in which an attacker injects malicious executable scripts into the code of a trusted application or website. 
How ?
const data=api.getData()
and if an attacker get accesss to execute js in user browser than all the information can be taken by the attacker.

But when we return the data in curly brackets i.e. {data}, than it gets automatically sanitized and attacker won't get the user machine access.JSX is this powerful that it provides sanitization for free.

<Title/> , {Title()} and <Title></Title> are same.

React is at the end of the day is js and jsx is what making it easier to write.
